'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { voiceService, VoiceProvider } from '@/lib/voice-service';
import { ELEVENLABS_VOICES, DEFAULT_ELEVENLABS_VOICE } from '@/lib/elevenlabs-voices';
import { useTextHighlighting } from '@/hooks/useTextHighlighting';
import { HighlightableText } from '@/components/HighlightableText';

interface AudioPlayerWithHighlightingProps {
  text: string;
  onStart?: () => void;
  onEnd?: () => void;
  onError?: (error: string) => void;
  className?: string;
  enableHighlighting?: boolean;
  showHighlightedText?: boolean;
}

export const AudioPlayerWithHighlighting: React.FC<AudioPlayerWithHighlightingProps> = ({
  text,
  onStart,
  onEnd,
  onError,
  className = '',
  enableHighlighting = true,
  showHighlightedText = true
}) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [audioActuallyStarted, setAudioActuallyStarted] = useState(false);
  const [playbackRate, setPlaybackRate] = useState(0.9);
  const [volume, setVolume] = useState(0.8);
  const [progress, setProgress] = useState(0);
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [showControls, setShowControls] = useState(false);
  const [selectedVoice, setSelectedVoice] = useState<SpeechSynthesisVoice | null>(null);
  const [availableVoices, setAvailableVoices] = useState<SpeechSynthesisVoice[]>([]);
  const [voiceProvider, setVoiceProvider] = useState<VoiceProvider>('web-speech');
  const [elevenLabsVoice, setElevenLabsVoice] = useState<string>(DEFAULT_ELEVENLABS_VOICE);
  const [openAIVoice, setOpenAIVoice] = useState<string>('alloy');

  const openAIVoices = [
    { id: 'alloy', name: 'Alloy (Neutral)' },
    { id: 'echo', name: 'Echo (Male)' },
    { id: 'fable', name: 'Fable (British Male)' },
    { id: 'onyx', name: 'Onyx (Deep Male)' },
    { id: 'nova', name: 'Nova (Female)' },
    { id: 'shimmer', name: 'Shimmer (Female)' }
  ];
  const [fallbackMessage, setFallbackMessage] = useState<string | null>(null);
  const [progressInterval, setProgressInterval] = useState<NodeJS.Timeout | null>(null);
  const [currentAudioElement, setCurrentAudioElement] = useState<HTMLAudioElement | null>(null);

  // Load available voices on mount
  useEffect(() => {
    const voices = voiceService.getEnglishVoices();
    setAvailableVoices(voices);
    setSelectedVoice(voiceService.getRecommendedVoice());
  }, []);

  // Estimate reading time (average 200 words per minute)
  useEffect(() => {
    const wordCount = text.split(/\s+/).length;
    const estimatedDuration = (wordCount / 200) * 60; // seconds
    setDuration(estimatedDuration);
  }, [text]);

  // TEXT HIGHLIGHTING INTEGRATION
  const {
    tokens,
    currentWordId,
    currentTime: highlightCurrentTime,
    onWordClick,
    seekToWord,
    isHighlightingEnabled
  } = useTextHighlighting({
    text,
    audioElement: currentAudioElement,
    isPlaying: audioActuallyStarted, // Only start highlighting when audio actually starts
    isPaused,
    voiceProvider,
    playbackRate,
    estimatedDuration: duration
  });

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (progressInterval) {
        clearInterval(progressInterval);
      }
      voiceService.stop();
    };
  }, [progressInterval]);

  const handlePlay = async () => {
    if (isLoading || isPlaying) {
      console.log('Already loading or playing, ignoring click');
      return;
    }
    
    console.log('handlePlay called with provider:', voiceProvider);
    
    // Always stop current audio first to prevent overlapping
    voiceService.stop();
    setIsPlaying(false);
    setIsPaused(false);
    setIsLoading(true);
    setAudioActuallyStarted(false); // Reset audio start state
    
    // Clear any previous fallback messages
    setFallbackMessage(null);
    
    console.log('🎵 UI State: Setting isLoading = true for', voiceProvider);
    
    // Show immediate feedback for slow providers
    if (voiceProvider === 'openai' || voiceProvider === 'elevenlabs') {
      setFallbackMessage('🎵 Generating high-quality audio... Highlighting will start when playback begins (10-20s)');
    }
    
    // Small delay to ensure cleanup
    await new Promise(resolve => setTimeout(resolve, 200));

    try {
      setProgress(0);
      setCurrentTime(0);
      onStart?.();

      const cleanText = voiceService.cleanTextForSpeech(text);
      
      console.log('Calling voiceService.speak with provider:', voiceProvider);
      
      // Don't await - let callbacks handle state updates
      voiceService.speak({
        text: cleanText,
        settings: {
          rate: playbackRate,
          volume: volume,
          voice: selectedVoice,
          pitch: 1.0,
          provider: voiceProvider,
          elevenLabsVoice: voiceProvider === 'elevenlabs' ? elevenLabsVoice : undefined,
          openAIVoice: voiceProvider === 'openai' ? openAIVoice : undefined
        },
        onStart: () => {
          console.log('🎵 Audio actually started playing - updating UI state');
          console.log('🎵 UI State: isLoading before:', isLoading);
          
          // FORCE UPDATE: Use functional updates to avoid stale closure
          setIsLoading(prev => {
            console.log('🎵 UI State: isLoading was:', prev, 'setting to false');
            return false;
          });
          setIsPlaying(prev => {
            console.log('🎵 UI State: isPlaying was:', prev, 'setting to true');
            return true;
          });
          setIsPaused(false);
          setFallbackMessage(null); // Clear any loading messages
          
          console.log('🎵 UI State: Called state updates with functional setters');
          
          // Clear any existing interval
          if (progressInterval) {
            clearInterval(progressInterval);
          }
          
          // For ElevenLabs/OpenAI, get and set the audio element immediately
          if (voiceProvider !== 'web-speech') {
            const audioElement = voiceService.getCurrentAudioElement();
            console.log('🎵 Got audio element for highlighting:', !!audioElement);
            
            // DEBUGGING: Try to force play the audio element
            if (audioElement) {
              console.log('🎵 DEBUGGING: Audio element volume:', audioElement.volume);
              console.log('🎵 DEBUGGING: Audio element muted:', audioElement.muted);
              console.log('🎵 DEBUGGING: Audio element paused:', audioElement.paused);
              console.log('🎵 DEBUGGING: Audio element currentTime:', audioElement.currentTime);
              console.log('🎵 DEBUGGING: Audio element src exists:', !!audioElement.src);
              
              // Check if audio is muted at system level
              if (audioElement.volume === 0) {
                console.warn('🎵 DEBUGGING: Audio volume is 0, setting to 0.8');
                audioElement.volume = 0.8;
              }
              
              if (audioElement.muted) {
                console.warn('🎵 DEBUGGING: Audio is muted, unmuting');
                audioElement.muted = false;
              }
              
              console.log('🎵 DEBUGGING: Attempting to force play audio element');
              audioElement.play().then(() => {
                console.log('🎵 DEBUGGING: Force play succeeded - audio should be audible now');
              }).catch(err => {
                console.log('🎵 DEBUGGING: Force play failed:', err);
              });
            }
            
            if (audioElement) {
              // Set audio element FIRST, then enable highlighting
              setCurrentAudioElement(audioElement);
              
              // Small delay to ensure state is updated before enabling highlighting
              setTimeout(() => {
                setAudioActuallyStarted(true);
                console.log('🎵 Audio element set, highlighting enabled');
              }, 50);
              
              // Wait for metadata to be fully loaded before using duration
              const waitForMetadata = () => {
                if (audioElement.duration && !isNaN(audioElement.duration) && audioElement.duration > 1) {
                  setDuration(audioElement.duration);
                  console.log('🎵 Set actual audio duration:', audioElement.duration);
                } else {
                  // If duration not ready yet, wait for loadedmetadata event
                  audioElement.addEventListener('loadedmetadata', () => {
                    if (audioElement.duration && !isNaN(audioElement.duration)) {
                      setDuration(audioElement.duration);
                      console.log('🎵 Set audio duration after metadata loaded:', audioElement.duration);
                    }
                  }, { once: true });
                  
                  // Fallback timeout in case metadata doesn't load
                  setTimeout(() => {
                    if (audioElement.duration && !isNaN(audioElement.duration)) {
                      setDuration(audioElement.duration);
                      console.log('🎵 Set audio duration (fallback):', audioElement.duration);
                    }
                  }, 1000);
                }
              };
              
              waitForMetadata();
              
              // Track actual progress
              const interval = setInterval(() => {
                if (audioElement && !audioElement.paused) {
                  const time = audioElement.currentTime;
                  const dur = audioElement.duration || duration;
                  setCurrentTime(time);
                  setProgress((time / dur) * 100);
                  
                  if (time >= dur) {
                    clearInterval(interval);
                    setProgressInterval(null);
                  }
                }
              }, 100);
              setProgressInterval(interval);
            } else {
              console.warn('🎵 No audio element found, highlighting will use time estimation');
              setAudioActuallyStarted(true); // Enable highlighting with time estimation
            }
          } else {
            // For web speech, use estimation
            setAudioActuallyStarted(true); // Enable highlighting for web speech
            const interval = setInterval(() => {
              setCurrentTime(prev => {
                const newTime = prev + 0.1;
                setProgress((newTime / duration) * 100);
                if (newTime >= duration) {
                  clearInterval(interval);
                  setProgressInterval(null);
                }
                return newTime;
              });
            }, 100);
            setProgressInterval(interval);
          }
        },
        onEnd: () => {
          setIsPlaying(false);
          setIsPaused(false);
          setIsLoading(false);
          setAudioActuallyStarted(false);
          setProgress(100);
          setCurrentTime(duration);
          setCurrentAudioElement(null);
          
          // Clear progress interval
          if (progressInterval) {
            clearInterval(progressInterval);
            setProgressInterval(null);
          }
          
          onEnd?.();
        },
        onError: (error: any) => {
          clearTimeout(loadingTimeout); // Clear loading timeout
          setIsPlaying(false);
          setIsPaused(false);
          setIsLoading(false);
          setAudioActuallyStarted(false);
          setProgress(0);
          setCurrentTime(0);
          
          if (error.error === 'autoplay_blocked') {
            setFallbackMessage('🔄 Click the play button again - browser needs permission for audio');
            setTimeout(() => setFallbackMessage(null), 6000);
            // Don't switch providers for autoplay issues
          } else if (voiceProvider !== 'web-speech') {
            setFallbackMessage('⚠️ Premium voice failed, please try Standard voice');
            setTimeout(() => setFallbackMessage(null), 5000);
          }
          onError?.(typeof error.error === 'string' ? error.error : 'error');
        },
        onPause: () => {
          setIsPaused(true);
          setIsPlaying(false);
        },
        onResume: () => {
          setIsPaused(false);
          setIsPlaying(true);
          setAudioActuallyStarted(true);
        }
      }).catch((error) => {
        console.error('Voice service error:', error);
        setIsPlaying(false);
        setIsPaused(false);
        setIsLoading(false);
        setAudioActuallyStarted(false);
        setFallbackMessage('⚠️ Audio playback failed. Please try again.');
        onError?.(error instanceof Error ? error.message : 'Speech synthesis failed');
      });
    } catch (error) {
      setIsPlaying(false);
      setIsPaused(false);
      setIsLoading(false);
      setAudioActuallyStarted(false);
      onError?.(error instanceof Error ? error.message : 'Speech synthesis failed');
    }
  };

  const handlePause = () => {
    // Clear progress tracking
    if (progressInterval) {
      clearInterval(progressInterval);
      setProgressInterval(null);
    }
    
    if (voiceProvider === 'web-speech') {
      // Web Speech API supports pause/resume
      voiceService.pause();
      setIsPaused(true);
      setIsPlaying(false);
      setAudioActuallyStarted(false);
    } else {
      // For ElevenLabs/OpenAI, pause the audio element
      if (currentAudioElement && !currentAudioElement.paused) {
        try {
          // Add event listener to handle pause completion
          currentAudioElement.addEventListener('pause', () => {
            console.log('🎵 Audio successfully paused');
          }, { once: true });
          
          currentAudioElement.pause();
          setIsPaused(true);
          setIsPlaying(false);
          setAudioActuallyStarted(false);
        } catch (error) {
          console.warn('Pause failed, stopping instead:', error);
          handleStop();
        }
      } else {
        // If no audio element or already paused, just update state
        setIsPaused(true);
        setIsPlaying(false);
        setAudioActuallyStarted(false);
      }
    }
  };

  const handleStop = () => {
    // Clear progress tracking
    if (progressInterval) {
      clearInterval(progressInterval);
      setProgressInterval(null);
    }
    
    voiceService.stop();
    setIsPlaying(false);
    setIsPaused(false);
    setAudioActuallyStarted(false);
    setProgress(0);
    setCurrentTime(0);
    setCurrentAudioElement(null);
  };

  // Handle word clicks from highlighting
  const handleWordClick = (token: any) => {
    if (!enableHighlighting) return;
    
    console.log('🖱️ Word clicked in AudioPlayer:', token.text);
    onWordClick(token);
  };

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getPlaybackRateLabel = (rate: number): string => {
    if (rate <= 0.7) return 'Slow';
    if (rate <= 0.9) return 'Natural';
    if (rate <= 1.1) return 'Normal';
    if (rate <= 1.3) return 'Fast';
    return 'Very Fast';
  };

  return (
    <div className={`audio-player-with-highlighting ${className}`}>
      {/* Fallback Message */}
      {fallbackMessage && (
        <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
          <p className="text-sm text-yellow-800">{fallbackMessage}</p>
        </div>
      )}

      {/* Highlighted Text Display */}
      {showHighlightedText && enableHighlighting && tokens.length > 0 && (
        <div style={{
          marginBottom: '20px',
          padding: '20px',
          backgroundColor: 'rgba(45, 55, 72, 0.4)',
          borderRadius: '8px',
          border: '1px solid rgba(102, 126, 234, 0.2)',
          maxHeight: '200px',
          overflowY: 'auto'
        }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '10px'
          }}>
            <h4 style={{ 
              margin: 0, 
              color: '#a5b4fc', 
              fontSize: '14px',
              fontWeight: '600'
            }}>
              📝 Synchronized Text (Click words to seek)
            </h4>
            <div style={{ 
              fontSize: '12px', 
              color: '#9ca3af' 
            }}>
              {isLoading && !audioActuallyStarted ? '⏳ Waiting for audio...' : 
               audioActuallyStarted && isHighlightingEnabled ? '✅ Highlighting Active' : 
               '⏸️ Highlighting Paused'}
            </div>
          </div>
          
          <HighlightableText
            tokens={tokens}
            currentWordId={currentWordId}
            onWordClick={handleWordClick}
            disabled={!isPlaying && !isPaused}
          />
        </div>
      )}

      {/* Voice Quality Toggle - BookBridge Style */}
      <div style={{ 
        marginBottom: '16px', 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'space-between' 
      }}>
        <span style={{ 
          fontSize: '12px', 
          fontWeight: '600', 
          color: '#e2e8f0',
          fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif'
        }}>
          Voice Quality
        </span>
        <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
          <motion.button
            onClick={() => {
              voiceService.stop();
              setIsPlaying(false);
              setIsPaused(false);
              setIsLoading(false);
              setProgress(0);
              setCurrentTime(0);
              if (progressInterval) {
                clearInterval(progressInterval);
                setProgressInterval(null);
              }
              setVoiceProvider('web-speech');
            }}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            style={{
              padding: '6px 10px',
              background: voiceProvider === 'web-speech'
                ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                : 'rgba(45, 55, 72, 0.6)',
              backdropFilter: 'blur(10px)',
              color: voiceProvider === 'web-speech' ? 'white' : '#cbd5e0',
              border: voiceProvider === 'web-speech' 
                ? '1px solid rgba(255, 255, 255, 0.2)' 
                : '1px solid rgba(102, 126, 234, 0.3)',
              borderRadius: '8px',
              fontSize: '10px',
              fontWeight: '600',
              fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
              cursor: 'pointer',
              transition: 'all 0.2s ease',
              boxShadow: voiceProvider === 'web-speech' 
                ? '0 4px 12px rgba(102, 126, 234, 0.3)' 
                : 'none'
            }}
          >
            Standard
          </motion.button>
          <motion.button
            onClick={() => {
              voiceService.stop();
              setIsPlaying(false);
              setIsPaused(false);
              setIsLoading(false);
              setProgress(0);
              setCurrentTime(0);
              if (progressInterval) {
                clearInterval(progressInterval);
                setProgressInterval(null);
              }
              setVoiceProvider('openai');
            }}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            style={{
              padding: '6px 10px',
              background: voiceProvider === 'openai'
                ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                : 'rgba(45, 55, 72, 0.6)',
              backdropFilter: 'blur(10px)',
              color: voiceProvider === 'openai' ? 'white' : '#cbd5e0',
              border: voiceProvider === 'openai' 
                ? '1px solid rgba(255, 255, 255, 0.2)' 
                : '1px solid rgba(102, 126, 234, 0.3)',
              borderRadius: '8px',
              fontSize: '10px',
              fontWeight: '600',
              fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
              cursor: 'pointer',
              transition: 'all 0.2s ease',
              boxShadow: voiceProvider === 'openai' 
                ? '0 4px 12px rgba(102, 126, 234, 0.3)' 
                : 'none'
            }}
          >
            OpenAI TTS {voiceProvider === 'openai' ? '✓' : ''}
          </motion.button>
          <motion.button
            onClick={() => {
              voiceService.stop();
              setIsPlaying(false);
              setIsPaused(false);
              setIsLoading(false);
              setProgress(0);
              setCurrentTime(0);
              if (progressInterval) {
                clearInterval(progressInterval);
                setProgressInterval(null);
              }
              setVoiceProvider('elevenlabs');
            }}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            style={{
              padding: '6px 10px',
              background: voiceProvider === 'elevenlabs'
                ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                : 'rgba(45, 55, 72, 0.6)',
              backdropFilter: 'blur(10px)',
              color: voiceProvider === 'elevenlabs' ? 'white' : '#cbd5e0',
              border: voiceProvider === 'elevenlabs' 
                ? '1px solid rgba(255, 255, 255, 0.2)' 
                : '1px solid rgba(102, 126, 234, 0.3)',
              borderRadius: '8px',
              fontSize: '10px',
              fontWeight: '600',
              fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
              cursor: 'pointer',
              transition: 'all 0.2s ease',
              boxShadow: voiceProvider === 'elevenlabs' 
                ? '0 4px 12px rgba(102, 126, 234, 0.3)' 
                : 'none'
            }}
          >
            ElevenLabs ✨
          </motion.button>
        </div>
      </div>

      {/* Voice Selection for Premium - ElevenLabs */}
      {voiceProvider === 'elevenlabs' && (
        <div style={{ marginBottom: '16px' }}>
          <label style={{
            display: 'block',
            marginBottom: '8px',
            fontSize: '11px',
            fontWeight: '600',
            color: '#a5b4fc',
            fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif'
          }}>
            Select Voice
          </label>
          <select
            value={elevenLabsVoice}
            onChange={(e) => {
              voiceService.stop();
              setIsPlaying(false);
              setIsPaused(false);
              setIsLoading(false);
              setProgress(0);
              setCurrentTime(0);
              if (progressInterval) {
                clearInterval(progressInterval);
                setProgressInterval(null);
              }
              setElevenLabsVoice(e.target.value);
            }}
            style={{
              width: '100%',
              padding: '8px 12px',
              background: 'rgba(45, 55, 72, 0.8)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(102, 126, 234, 0.3)',
              borderRadius: '8px',
              fontSize: '12px',
              fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
              color: '#e2e8f0',
              cursor: 'pointer',
              transition: 'all 0.2s ease'
            }}
          >
            <optgroup label="Female Voices">
              {ELEVENLABS_VOICES.filter(v => v.category === 'female').map(voice => (
                <option key={voice.voice_id} value={voice.voice_id} style={{ background: '#2d3748', color: '#e2e8f0' }}>
                  {voice.name} ({voice.accent}) - {voice.description}
                </option>
              ))}
            </optgroup>
            <optgroup label="Male Voices">
              {ELEVENLABS_VOICES.filter(v => v.category === 'male').map(voice => (
                <option key={voice.voice_id} value={voice.voice_id} style={{ background: '#2d3748', color: '#e2e8f0' }}>
                  {voice.name} ({voice.accent}) - {voice.description}
                </option>
              ))}
            </optgroup>
          </select>
        </div>
      )}

      {/* OpenAI Voice Selection */}
      {voiceProvider === 'openai' && (
        <div style={{ marginBottom: '16px' }}>
          <label style={{
            display: 'block',
            marginBottom: '8px',
            fontSize: '11px',
            fontWeight: '600',
            color: '#a5b4fc',
            fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif'
          }}>
            OpenAI Voice:
          </label>
          <select
            value={openAIVoice}
            onChange={(e) => setOpenAIVoice(e.target.value)}
            style={{
              width: '100%',
              padding: '8px 12px',
              background: 'rgba(45, 55, 72, 0.8)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(102, 126, 234, 0.3)',
              borderRadius: '8px',
              fontSize: '12px',
              fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
              color: '#e2e8f0',
              cursor: 'pointer',
              transition: 'all 0.2s ease'
            }}
          >
            {openAIVoices.map(voice => (
              <option key={voice.id} value={voice.id} style={{ background: '#2d3748', color: '#e2e8f0' }}>
                {voice.name}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* Main Play Button - BookBridge Style */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        gap: '12px',
        background: 'rgba(26, 32, 44, 0.8)',
        backdropFilter: 'blur(15px)',
        padding: '12px 16px',
        borderRadius: '12px',
        border: '1px solid rgba(102, 126, 234, 0.3)',
        boxShadow: '0 4px 16px rgba(0, 0, 0, 0.2)'
      }}>
        {/* Play/Pause/Stop Controls */}
        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
          <motion.button
            onClick={isPlaying ? handlePause : handlePlay}
            whileHover={{ scale: isLoading ? 1 : 1.05 }}
            whileTap={{ scale: isLoading ? 1 : 0.95 }}
            disabled={isLoading}
            style={{
              padding: '10px 16px',
              background: isLoading
                ? 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)'
                : isPlaying 
                ? 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)'
                : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              fontSize: '13px',
              fontWeight: '600',
              fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
              cursor: isLoading ? 'not-allowed' : 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              transition: 'all 0.2s ease',
              opacity: isLoading ? 0.7 : 1,
              boxShadow: isLoading ? 'none' : '0 4px 12px rgba(102, 126, 234, 0.3)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(255, 255, 255, 0.1)'
            }}
            aria-label={isPlaying ? 'Pause audio' : 'Play audio'}
          >
            {isLoading ? (
              <>
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                >
                  ⏳
                </motion.div>
                Loading...
              </>
            ) : isPlaying ? (
              <>
                <motion.div
                  animate={{ scale: [1, 1.1, 1] }}
                  transition={{ duration: 1, repeat: Infinity }}
                >
                  ⏸️
                </motion.div>
                Pause
              </>
            ) : isPaused ? (
              <>
                ▶️ Resume
              </>
            ) : (
              <>
                🔊 Listen
              </>
            )}
          </motion.button>

          {(isPlaying || isPaused || progress > 0) && (
            <motion.button
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              onClick={handleStop}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              style={{
                padding: '8px',
                background: '#ef4444',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                fontSize: '12px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center'
              }}
              aria-label="Stop audio"
            >
              ⏹️
            </motion.button>
          )}
        </div>

        {/* Progress Bar */}
        {(isPlaying || isPaused || progress > 0) && (
          <motion.div
            initial={{ opacity: 0, width: 0 }}
            animate={{ opacity: 1, width: 'auto' }}
            style={{
              flex: 1,
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}
          >
            <div style={{
              flex: 1,
              height: '4px',
              background: '#e0e7ff',
              borderRadius: '2px',
              overflow: 'hidden'
            }}>
              <motion.div
                style={{
                  height: '100%',
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  borderRadius: '2px'
                }}
                initial={{ width: 0 }}
                animate={{ width: `${progress}%` }}
                transition={{ duration: 0.1 }}
              />
            </div>
            
            <div style={{
              fontSize: '10px',
              color: '#6b7280',
              fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
              fontWeight: '500',
              minWidth: '60px'
            }}>
              {formatTime(currentTime)} / {formatTime(duration)}
            </div>
          </motion.div>
        )}

        {/* Controls Toggle */}
        <motion.button
          onClick={() => setShowControls(!showControls)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            padding: '6px',
            background: '#f8faff',
            border: '1px solid #e0e7ff',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '12px',
            color: '#667eea'
          }}
          aria-label="Toggle audio controls"
          aria-expanded={showControls}
        >
          ⚙️
        </motion.button>
      </div>

      {/* Advanced Controls */}
      <AnimatePresence>
        {showControls && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            style={{
              marginTop: '8px',
              background: 'white',
              padding: '12px',
              borderRadius: '8px',
              border: '1px solid #e0e7ff',
              boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)'
            }}
          >
            {/* Speed Control */}
            <div style={{ marginBottom: '12px' }}>
              <label style={{
                fontSize: '11px',
                fontWeight: '600',
                color: '#374151',
                fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
                display: 'block',
                marginBottom: '4px'
              }}>
                Speed: {getPlaybackRateLabel(playbackRate)} ({playbackRate}x)
              </label>
              <input
                type="range"
                min="0.5"
                max="2.0"
                step="0.1"
                value={playbackRate}
                onChange={(e) => setPlaybackRate(parseFloat(e.target.value))}
                style={{
                  width: '100%',
                  height: '4px',
                  background: '#e0e7ff',
                  borderRadius: '2px',
                  outline: 'none',
                  cursor: 'pointer'
                }}
              />
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                fontSize: '9px',
                color: '#9ca3af',
                marginTop: '2px'
              }}>
                <span>0.5x</span>
                <span>1.0x</span>
                <span>2.0x</span>
              </div>
            </div>

            {/* Volume Control */}
            <div style={{ marginBottom: '12px' }}>
              <label style={{
                fontSize: '11px',
                fontWeight: '600',
                color: '#374151',
                fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
                display: 'block',
                marginBottom: '4px'
              }}>
                Volume: {Math.round(volume * 100)}%
              </label>
              <input
                type="range"
                min="0"
                max="1"
                step="0.1"
                value={volume}
                onChange={(e) => setVolume(parseFloat(e.target.value))}
                style={{
                  width: '100%',
                  height: '4px',
                  background: '#e0e7ff',
                  borderRadius: '2px',
                  outline: 'none',
                  cursor: 'pointer'
                }}
              />
            </div>

            {/* Voice Selection */}
            {availableVoices.length > 0 && (
              <div>
                <label style={{
                  fontSize: '11px',
                  fontWeight: '600',
                  color: '#374151',
                  fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
                  display: 'block',
                  marginBottom: '4px'
                }}>
                  Voice: {selectedVoice?.name || 'Default'}
                </label>
                <select
                  value={selectedVoice?.name || ''}
                  onChange={(e) => {
                    const voice = availableVoices.find(v => v.name === e.target.value);
                    setSelectedVoice(voice || null);
                    voiceService.updateSettings({ voice: voice || null });
                  }}
                  style={{
                    width: '100%',
                    padding: '4px 8px',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    fontSize: '11px',
                    fontFamily: '"Inter", "Segoe UI", system-ui, sans-serif',
                    background: 'white'
                  }}
                >
                  {availableVoices.map((voice) => (
                    <option key={voice.name} value={voice.name}>
                      {voice.name} ({voice.lang})
                    </option>
                  ))}
                </select>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Highlighting Debug Info (only in development) */}
      {process.env.NODE_ENV === 'development' && enableHighlighting && (
        <div style={{
          marginTop: '12px',
          padding: '8px',
          backgroundColor: 'rgba(34, 197, 94, 0.1)',
          borderRadius: '6px',
          fontSize: '11px',
          color: '#22c55e'
        }}>
          <strong>🎯 Highlighting Debug:</strong> {tokens.length} tokens • Current: {currentWordId ? tokens.find(t => t.id === currentWordId)?.text : 'None'} • Time: {highlightCurrentTime.toFixed(1)}s
        </div>
      )}
    </div>
  );
};

export default AudioPlayerWithHighlighting;