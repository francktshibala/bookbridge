generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String?
  isStudent        Boolean        @default(false)
  fontSize         Int            @default(18)
  contrast         String         @default("normal")
  dyslexiaFont     Boolean        @default(false)
  reducedMotion    Boolean        @default(false)
  screenReaderMode Boolean        @default(false)
  colorBlindMode   String         @default("none")
  voiceNavigation  Boolean        @default(false)
  readingSpeed     Float          @default(1.0)
  // ESL-specific fields
  eslLevel         String?        @map("esl_level") // A1, A2, B1, B2, C1, C2
  nativeLanguage   String?        @map("native_language")
  learningGoals    Json?          @map("learning_goals")
  readingSpeedWpm  Int?           @default(150) @map("reading_speed_wpm")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  conversations    Conversation[]
  subscription     Subscription?
  usage            Usage[]
  // ESL-related relationships
  vocabularyProgress ESLVocabularyProgress[]
  readingSessions    ReadingSession[]

  @@map("users")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  tier      String   @default("free")
  status    String   @default("active")
  stripeId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Book {
  id            String         @id @default(cuid())
  title         String
  author        String
  publicDomain  Boolean        @default(true)
  description   String?
  genre         String?
  publishYear   Int?
  isbn          String?
  language      String         @default("en")
  filename      String?
  fileSize      Int?
  uploadedBy    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookCache     BookCache?
  conversations Conversation[]

  @@map("books")
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  bookId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  content        String
  sender         String
  embedding      Json?
  tokensUsed     Int?
  model          String?
  cost           Decimal?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model EpisodicMemory {
  id             String   @id @default(cuid())
  conversationId String
  timestamp      DateTime @default(now())
  query          String
  response       String
  bookPassage    String?
  userReaction   String?  // 'confused' | 'understood' | 'engaged'
  concepts       Json?    // Array of concepts discussed
  // ESL enhancements
  vocabularyIntroduced Json? @map("vocabulary_introduced") @default("[]")
  difficultyLevel String? @map("difficulty_level") // CEFR level
  comprehensionScore Decimal? @map("comprehension_score") @db.Decimal(3,2)
  createdAt      DateTime @default(now())

  @@map("episodic_memory")
}

model Usage {
  id      String   @id @default(cuid())
  userId  String
  date    DateTime @default(now())
  queries Int      @default(0)
  tokens  Int      @default(0)
  cost    Decimal  @default(0)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("usage")
}

model SystemUsage {
  id           String   @id @default(cuid())
  date         DateTime @unique @default(now())
  totalQueries Int      @default(0)
  totalTokens  Int      @default(0)
  totalCost    Decimal  @default(0)
  activeUsers  Int      @default(0)

  @@map("system_usage")
}

model BookCache {
  id            String   @id @default(cuid())
  bookId        String   @unique
  chunks        Json
  totalChunks   Int
  metadata      Json
  lastProcessed DateTime @default(now())
  indexed       Boolean  @default(false)
  book          Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("book_cache")
}

model AppTestimonial {
  id          String   @id @default(cuid())
  userName    String   @map("user_name")
  userTitle   String?  @map("user_title")
  userRole    String?  @map("user_role")
  rating      Int
  content     String
  featured    Boolean  @default(false)
  verified    Boolean  @default(false)
  avatarColor String   @default("#667eea") @map("avatar_color")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("app_testimonials")
}

// ESL-specific models for language learning features
model ESLVocabularyProgress {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  word           String
  definition     String?
  difficultyLevel String? @map("difficulty_level") // CEFR level (A1, A2, B1, B2, C1, C2)
  encounters     Int      @default(1)
  masteryLevel   Int      @default(0) @map("mastery_level") // 0-5 scale
  
  // SM-2 SRS Algorithm fields
  easeFactor     Decimal  @default(2.5) @map("ease_factor") @db.Decimal(3,2) // 1.3-2.5 range
  srsInterval    Int      @default(1) @map("srs_interval") // days until next review
  repetitions    Int      @default(0) // successful reviews in a row
  lastQuality    Int      @default(0) @map("last_quality") // 0-5 response quality
  
  firstSeen      DateTime @default(now()) @map("first_seen")
  lastReviewed   DateTime @default(now()) @map("last_reviewed")
  nextReview     DateTime @default(now()) @map("next_review")
  createdAt      DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, word])
  @@index([userId, nextReview])
  @@index([difficultyLevel, easeFactor]) // For SRS queries
  @@map("esl_vocabulary_progress")
}

model ReadingSession {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  bookId            String    @map("book_id")
  sessionStart      DateTime  @default(now()) @map("session_start")
  sessionEnd        DateTime? @map("session_end")
  wordsRead         Int       @default(0) @map("words_read")
  avgReadingSpeed   Int?      @map("avg_reading_speed") // WPM
  difficultyLevel   String?   @map("difficulty_level") // CEFR level
  comprehensionScore Decimal? @map("comprehension_score") @db.Decimal(3,2)
  vocabularyLookups Int       @default(0) @map("vocabulary_lookups")
  timeOnSimplified  Int       @default(0) @map("time_on_simplified") // seconds
  timeOnOriginal    Int       @default(0) @map("time_on_original") // seconds
  createdAt         DateTime  @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, bookId])
  @@index([userId, createdAt])
  @@map("reading_sessions")
}

model BookSimplification {
  id                  String   @id @default(cuid())
  bookId              String   @map("book_id")
  targetLevel         String   @map("target_level") // CEFR level (A1, A2, B1, B2, C1, C2)
  chunkIndex          Int      @map("chunk_index")
  originalText        String   @map("original_text")
  simplifiedText      String   @map("simplified_text")
  vocabularyChanges   Json     @default("[]") @map("vocabulary_changes")
  culturalAnnotations Json     @default("[]") @map("cultural_annotations")
  qualityScore        Decimal? @map("quality_score") @db.Decimal(3,2)
  versionKey          String   @default("v1") @map("version_key") // For cache invalidation
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@unique([bookId, targetLevel, chunkIndex, versionKey])
  @@index([bookId, targetLevel])
  @@index([updatedAt])
  @@index([versionKey]) // For cache invalidation queries
  @@map("book_simplifications")
}

// New models for precomputed content + audio system

model BookContent {
  id          String   @id @default(cuid())
  bookId      String   @unique @map("book_id")
  title       String
  author      String
  fullText    String   @map("full_text")
  era         String?  // 'early-modern', 'victorian', 'american-19c', 'modern'
  wordCount   Int      @map("word_count")
  totalChunks Int      @map("total_chunks")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  chunks BookChunk[]
  audioFiles BookAudio[]

  @@index([era])
  @@map("book_content")
}

model BookChunk {
  id           String   @id @default(cuid())
  bookId       String   @map("book_id")
  cefrLevel    String   @map("cefr_level") // A1, A2, B1, B2, C1, C2, original
  chunkIndex   Int      @map("chunk_index")
  chunkText    String   @map("chunk_text")
  wordCount    Int      @map("word_count")
  isSimplified Boolean  @default(false) @map("is_simplified")
  qualityScore Decimal? @map("quality_score") @db.Decimal(3,2)
  createdAt    DateTime @default(now()) @map("created_at")
  
  bookContent BookContent @relation(fields: [bookId], references: [bookId], onDelete: Cascade)
  audioSegments AudioSegment[]

  @@unique([bookId, cefrLevel, chunkIndex])
  @@index([bookId, cefrLevel])
  @@index([bookId, chunkIndex])
  @@map("book_chunks")
}

model BookAudio {
  id        String   @id @default(cuid())
  bookId    String   @map("book_id")
  cefrLevel String   @map("cefr_level") // A1, A2, B1, B2, C1, C2, original
  voiceId   String   @map("voice_id") // OpenAI/ElevenLabs voice identifier
  audioUrl  String?  @map("audio_url") // URL or path to audio file
  audioBlob Bytes?   @map("audio_blob") // Direct audio storage
  duration  Float?   @map("duration") // Total duration in seconds
  fileSize  Int?     @map("file_size") // File size in bytes
  format    String   @default("mp3") // Audio format
  createdAt DateTime @default(now()) @map("created_at")
  
  bookContent BookContent @relation(fields: [bookId], references: [bookId], onDelete: Cascade)
  audioSegments AudioSegment[]

  @@unique([bookId, cefrLevel, voiceId])
  @@index([bookId, cefrLevel])
  @@map("book_audio")
}

model AudioSegment {
  id          String   @id @default(cuid())
  bookId      String   @map("book_id")
  audioId     String   @map("audio_id")
  chunkId     String   @map("chunk_id")
  startTime   Float    @map("start_time") // Start time in seconds
  endTime     Float    @map("end_time")   // End time in seconds
  wordTimings Json     @map("word_timings") // Array of {word, start, end} objects
  audioBlob   Bytes?   @map("audio_blob") // Individual chunk audio data
  createdAt   DateTime @default(now()) @map("created_at")
  
  bookAudio BookAudio @relation(fields: [audioId], references: [id], onDelete: Cascade)
  bookChunk BookChunk @relation(fields: [chunkId], references: [id], onDelete: Cascade)

  @@unique([audioId, chunkId])
  @@index([bookId])
  @@map("audio_segments")
}

model PrecomputeQueue {
  id          String   @id @default(cuid())
  bookId      String   @map("book_id")
  cefrLevel   String   @map("cefr_level")
  chunkIndex  Int      @map("chunk_index")
  priority    String   @default("normal") // 'high', 'normal', 'background'
  status      String   @default("pending") // 'pending', 'processing', 'completed', 'failed'
  taskType    String   @map("task_type") // 'simplification', 'audio', 'both'
  attempts    Int      @default(0)
  lastError   String?  @map("last_error")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  @@unique([bookId, cefrLevel, chunkIndex, taskType])
  @@index([status, priority])
  @@index([createdAt])
  @@map("precompute_queue")
}
